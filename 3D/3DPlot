import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import os

# Load your data
dir_path = os.path.dirname(os.path.realpath(__file__))
df = pd.read_csv(f"{dir_path}/Result_ve2.csv")

# Replace '---' with NaN
df.replace('---', np.nan, inplace=True)

# Convert columns to numeric, if they're not already
df['B_Torque'] = pd.to_numeric(df['B_Torque'], errors='coerce')
df['MaxSpeed_T'] = pd.to_numeric(df['MaxSpeed_T'], errors='coerce')
# Assuming another column for BEMF_peak, please replace 'BEMF_peak' with the correct column name if different
df['BEMF_peak'] = pd.to_numeric(df['BEMF_peak'], errors='coerce') 
df['T_Ripple'] = pd.to_numeric(df['T_Ripple'], errors='coerce')  # Assuming 'T_Ripple' is the correct column name

# Drop rows with NaN
df.dropna(subset=['B_Torque', 'MaxSpeed_T', 'BEMF_peak'], inplace=True)

# Now, plotting
fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')

# Assuming 'B_B_Torque' corresponds to 'B_Torque' and 'MaxSpeed_T' corresponds to 'Speed'
ax.scatter(df['B_Torque'], df['MaxSpeed_T'], df['BEMF_peak'], c='blue', marker='o')

ax.set_xlabel('B_Torque')
ax.set_ylabel('MaxSpeed_T')
ax.set_zlabel('BEMF_peak')

plt.title('3D Plot of B_Torque, MaxSpeed_T, and BEMF_peak')
plt.show()

print(df['BEMF_peak'])
# Function to find cases meeting specific criteria
def find_best_cases_with_details(df):
    # Filter based on given criteria
    filtered_df = df[
        (df['B_Torque'] > 3267) & 
        (df['MaxSpeed_T'] > 923) & 
        (df['BEMF_peak'] <= 3500)
    ]
    
    # Apply weights
    filtered_df['Score'] = (filtered_df['B_Torque'] * 1.0) - (filtered_df['T_Ripple'] * 2.0)
    
    # Select top 3 cases based on the score
    best_cases_df = filtered_df.nlargest(3, 'Score')
    
    # Return the dataframe with selected columns for best cases
    return best_cases_df[['Case', 'B_Torque', 'MaxSpeed_T', 'BEMF_peak', 'T_Ripple']]

# Assuming the dataframe is already loaded and processed as per the previous steps
best_cases_df = find_best_cases_with_details(df)
print(best_cases_df)